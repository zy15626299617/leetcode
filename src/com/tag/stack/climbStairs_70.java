package com.tag.stack;

/**
 * Created by 周游 on 2020/6/13
 * E-mail:15626299617@163.com
 */


//我们用 f(x)f(x) 表示爬到第 xx 级台阶的方案数，考虑最后一步可能跨了一级台阶，也可能跨了两级台阶，所以我们可以列出如下式子：
//f(x) = f(x - 1) + f(x - 2)
//f(x)=f(x−1)+f(x−2)
//它意味着爬到第 xx 级台阶的方案数是爬到第 x - 1x−1 级台阶的方案数和爬到第 x - 2x−2 级台阶的方案数的和。
// 很好理解，因为每次只能爬 11 级或 22 级，所以 f(x)f(x) 只能从 f(x - 1)f(x−1) 和 f(x - 2)f(x−2) 转移过来，
// 而这里要统计方案总数，我们就需要对这两项的贡献求和。
//以上是动态规划的转移方程，下面我们来讨论边界条件。我们是从第 00 级开始爬的，所以从第 00 级爬到第 00 级我们可以看作只有一种方案，即 f(0) = 1f(0)=1；
// 从第 00 级到第 11 级也只有一种方案，即爬一级，f(1) = 1f(1)=1。这两个作为边界条件就可以继续向后推导出第 nn 级的正确结果。

public class climbStairs_70 {
    public static void main(String[] args){
        int n = 0;

        int all = 1,pre = 0,p_pre = 0;
        for (int i = 1;i <= n; i++){
            p_pre = pre;
            pre = all;
            all = pre + p_pre;
        }
        //return all;
    }
}
